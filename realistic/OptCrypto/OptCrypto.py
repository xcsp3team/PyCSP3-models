"""
The model, below, is close to (can be seen as the close translation of) the one submitted to the Minizinc challenges.
No Licence was explicitly mentioned (MIT Licence is assumed).

## Data
  an integer n

## Model
  constraints: Sum, Table

## Execution
  python OptCrypto.py -data=[integer]

## Links
  - https://www.minizinc.org/challenge2021/results2021.html

## Tags
  realistic, mzn17, mzn18, mzn21
"""

from pycsp3 import *

nRounds = data

DDT = [(0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 1, 0, 0, 1, 1, 2), (0, 0, 0, 1, 0, 1, 1, 1, 2), (0, 0, 0, 1, 1, 0, 0, 1, 2), (0, 0, 0, 1, 1, 1, 0, 1, 2),
       (0, 0, 1, 0, 0, 0, 1, 1, 3), (0, 0, 1, 0, 0, 1, 0, 1, 2), (0, 0, 1, 0, 0, 1, 1, 0, 3), (0, 0, 1, 0, 1, 0, 1, 0, 3), (0, 0, 1, 0, 1, 1, 0, 0, 3),
       (0, 0, 1, 0, 1, 1, 0, 1, 3), (0, 0, 1, 0, 1, 1, 1, 0, 3), (0, 0, 1, 1, 0, 0, 0, 1, 3), (0, 0, 1, 1, 0, 0, 1, 1, 3), (0, 0, 1, 1, 0, 1, 0, 0, 3),
       (0, 0, 1, 1, 0, 1, 1, 0, 2), (0, 0, 1, 1, 0, 1, 1, 1, 3), (0, 0, 1, 1, 1, 0, 1, 0, 3), (0, 0, 1, 1, 1, 0, 1, 1, 3), (0, 1, 0, 0, 0, 1, 0, 1, 2),
       (0, 1, 0, 0, 0, 1, 1, 0, 3), (0, 1, 0, 0, 0, 1, 1, 1, 3), (0, 1, 0, 0, 1, 0, 0, 1, 3), (0, 1, 0, 0, 1, 0, 1, 0, 3), (0, 1, 0, 0, 1, 1, 0, 0, 3),
       (0, 1, 0, 0, 1, 1, 1, 0, 3), (0, 1, 0, 1, 0, 0, 0, 1, 3), (0, 1, 0, 1, 0, 1, 0, 0, 3), (0, 1, 0, 1, 1, 0, 0, 1, 3), (0, 1, 0, 1, 1, 0, 1, 0, 3),
       (0, 1, 0, 1, 1, 0, 1, 1, 3), (0, 1, 0, 1, 1, 1, 0, 0, 2), (0, 1, 0, 1, 1, 1, 0, 1, 3), (0, 1, 1, 0, 0, 0, 1, 0, 3), (0, 1, 1, 0, 0, 1, 1, 0, 3),
       (0, 1, 1, 0, 1, 0, 0, 0, 3), (0, 1, 1, 0, 1, 0, 1, 1, 2), (0, 1, 1, 0, 1, 1, 0, 0, 3), (0, 1, 1, 0, 1, 1, 1, 1, 2), (0, 1, 1, 1, 0, 0, 0, 1, 2),
       (0, 1, 1, 1, 0, 0, 1, 0, 3), (0, 1, 1, 1, 0, 1, 1, 0, 3), (0, 1, 1, 1, 1, 0, 0, 0, 3), (0, 1, 1, 1, 1, 1, 0, 0, 3), (0, 1, 1, 1, 1, 1, 1, 1, 2),
       (1, 0, 0, 0, 0, 0, 1, 1, 3), (1, 0, 0, 0, 0, 1, 1, 1, 3), (1, 0, 0, 0, 1, 0, 0, 1, 3), (1, 0, 0, 0, 1, 0, 1, 1, 2), (1, 0, 0, 0, 1, 1, 0, 1, 3),
       (1, 0, 0, 0, 1, 1, 1, 1, 2), (1, 0, 0, 1, 0, 0, 1, 0, 3), (1, 0, 0, 1, 0, 1, 0, 0, 2), (1, 0, 0, 1, 0, 1, 1, 0, 3), (1, 0, 0, 1, 1, 0, 0, 0, 3),
       (1, 0, 0, 1, 1, 1, 0, 0, 3), (1, 0, 0, 1, 1, 1, 1, 0, 2), (1, 0, 1, 0, 0, 0, 1, 0, 3), (1, 0, 1, 0, 0, 0, 1, 1, 3), (1, 0, 1, 0, 0, 1, 0, 1, 2),
       (1, 0, 1, 0, 1, 0, 0, 0, 3), (1, 0, 1, 0, 1, 0, 1, 0, 3), (1, 0, 1, 0, 1, 1, 0, 1, 3), (1, 0, 1, 0, 1, 1, 1, 0, 3), (1, 0, 1, 1, 0, 0, 0, 1, 3),
       (1, 0, 1, 1, 0, 1, 0, 0, 3), (1, 0, 1, 1, 1, 0, 0, 0, 2), (1, 0, 1, 1, 1, 0, 0, 1, 3), (1, 0, 1, 1, 1, 0, 1, 0, 3), (1, 0, 1, 1, 1, 0, 1, 1, 3),
       (1, 0, 1, 1, 1, 1, 0, 1, 3), (1, 1, 0, 0, 0, 0, 1, 0, 3), (1, 1, 0, 0, 0, 1, 0, 1, 2), (1, 1, 0, 0, 0, 1, 1, 1, 3), (1, 1, 0, 0, 1, 0, 0, 0, 3),
       (1, 1, 0, 0, 1, 0, 0, 1, 3), (1, 1, 0, 0, 1, 0, 1, 0, 3), (1, 1, 0, 0, 1, 1, 1, 0, 3), (1, 1, 0, 1, 0, 0, 0, 1, 3), (1, 1, 0, 1, 0, 0, 1, 0, 2),
       (1, 1, 0, 1, 0, 0, 1, 1, 3), (1, 1, 0, 1, 0, 1, 0, 0, 3), (1, 1, 0, 1, 0, 1, 1, 1, 3), (1, 1, 0, 1, 1, 0, 1, 0, 3), (1, 1, 0, 1, 1, 0, 1, 1, 3),
       (1, 1, 1, 0, 0, 0, 1, 0, 3), (1, 1, 1, 0, 0, 0, 1, 1, 3), (1, 1, 1, 0, 0, 1, 1, 0, 3), (1, 1, 1, 0, 0, 1, 1, 1, 3), (1, 1, 1, 0, 1, 0, 0, 0, 3),
       (1, 1, 1, 0, 1, 0, 0, 1, 3), (1, 1, 1, 0, 1, 1, 0, 0, 3), (1, 1, 1, 0, 1, 1, 0, 1, 3), (1, 1, 1, 1, 0, 0, 0, 1, 2), (1, 1, 1, 1, 0, 1, 0, 0, 2),
       (1, 1, 1, 1, 1, 1, 1, 0, 2), (1, 1, 1, 1, 1, 1, 1, 1, 2)]

P = [0, 16, 32, 48, 1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 7, 23, 39, 55, 8, 24, 40, 56, 9, 25, 41, 57, 10,
     26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 15, 31, 47, 63]

nBits = 64

# x[i][j] is the value of the jth bit of the ith sequence
x = VarArray(size=[nRounds + 1, nBits], dom={0, 1})

# xp[i][j] is the value of the jth bit of the ith sequence after applying permutation
xp = VarArray(size=[nRounds, nBits], dom={0, 1})

prb = VarArray(size=16 * nRounds, dom={0, 2, 3})

# z is the objective
z = Var(dom=range(1, nBits + 1))

satisfy(
    # applying permutations
    [xp[i][P[j]] == x[i][j] for i in range(nRounds) for j in range(nBits)],

    # SB
    [(xp[i, 4 * j:4 * j + 4], x[i + 1, 4 * j:4 * j + 4], prb[16 * i + j]) in DDT for i in range(nRounds) for j in range(16)],

    # computing the objective value
    z == Sum(prb),

    # Matsui like
    [
        [prb[i] != 3 for i in range(16)],
        [prb[i] != 3 for i in range((nRounds - 1) * 16, nRounds * 16)]
    ]
)

minimize(
    z
)

"""
1) data used in challenges are:
  2017: 5, 7, 9, 11, 15
  2018: 6, 8, 10, 12, 14
  2021: 1, 2, 3, 4, 13
"""
