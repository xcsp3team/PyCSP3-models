from pycsp3.problems.data.parsing import *

nNodes = number_in(line())
M = number_in(next_line())
nDomains = number_in(next_line())
data['domain_link_weights'] = split_with_rows_of_size(numbers_in(next_line()), nDomains)
assert nDomains == len(data['domain_link_weights'])
nLinks = number_in(next_line())
data['node_links'] = decrement(split_with_rows_of_size(numbers_in(next_line()), 2))
assert nLinks == len(data['node_links'])
data['nodes'] = decrement(split_with_rows_of_size(numbers_in(next_line()), 8))
assert nNodes == len(data['nodes'])
start_domain = number_in(next_line()) - 1
target_domain = number_in(next_line()) - 1
data['domain'] = OrderedDict([("start", start_domain), ("target", target_domain)])
vnflist_size = number_in(next_line())
vnf_list = decrement(numbers_in(next_line()))
assert vnflist_size == len(vnf_list)
vnf_arcs = decrement(split_with_rows_of_size(numbers_in(next_line()), 2))
assert vnflist_size - 1 == len(vnf_arcs)
data['vnf'] = OrderedDict([("list", vnf_list), ("arcs", vnf_arcs)])
proximity_to_source = numbers_in(next_line())
proximity_to_destination = numbers_in(next_line())
data['proximity'] = OrderedDict([("to_source", proximity_to_source), ("to_destination", proximity_to_destination)])
assert vnflist_size == len(proximity_to_source) == len(proximity_to_destination)
n_domain_constraints = number_in(next_line())
data['domain_constraints'] = decrement(split_with_rows_of_size(numbers_in(next_line()), 4))
assert n_domain_constraints == len(data['domain_constraints'])
