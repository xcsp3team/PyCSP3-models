<instance format="XCSP3" type="COP">
  <variables>
    <array id="how" note="how[i] is the voucher used for the ith pizza. 0 means that no voucher is used. A negative (resp., positive) value i means that the ith pizza contributes to the the buy (resp., free) part of voucher |i|." size="[10]"> -9..9 </array>
    <array id="used" note="used[i] is 1 if the ith voucher is used" size="[9]"> 0 1 </array>
    <array id="aux_gb" note="aux_gb[i] is the ith auxiliary variable having been automatically introduced" size="[27]">
      <domain for="aux_gb[0] aux_gb[2] aux_gb[4] aux_gb[6] aux_gb[8] aux_gb[10] aux_gb[12] aux_gb[14] aux_gb[16]"> 0..10 </domain>
      <domain for="aux_gb[1] aux_gb[5] aux_gb[15] aux_gb[20..22]"> 0 1 </domain>
      <domain for="aux_gb[3] aux_gb[9] aux_gb[11] aux_gb[18] aux_gb[23] aux_gb[26]"> 0..2 </domain>
      <domain for="aux_gb[7] aux_gb[25]"> 0 </domain>
      <domain for="aux_gb[13] aux_gb[17] aux_gb[19] aux_gb[24]"> 0..3 </domain>
    </array>
  </variables>
  <constraints>
    <block note="assigning right number of pizzas to buy order">
      <group>
        <intension> eq(%0,ge(%1,%2)) </intension>
        <args> used[0] aux_gb[0] 1 </args>
        <args> used[1] aux_gb[2] 2 </args>
        <args> used[2] aux_gb[4] 1 </args>
        <args> used[3] aux_gb[6] 0 </args>
        <args> used[4] aux_gb[8] 2 </args>
        <args> used[5] aux_gb[10] 2 </args>
        <args> used[6] aux_gb[12] 3 </args>
        <args> used[7] aux_gb[14] 1 </args>
        <args> used[8] aux_gb[16] 3 </args>
      </group>
      <group>
        <sum>
          <list> %... </list>
          <condition> (le,%0) </condition>
        </sum>
        <args> aux_gb[1] eq(how[0],-1) eq(how[1],-1) eq(how[2],-1) eq(how[3],-1) eq(how[4],-1) eq(how[5],-1) eq(how[6],-1) eq(how[7],-1) eq(how[8],-1) eq(how[9],-1) </args>
        <args> aux_gb[3] eq(how[0],-2) eq(how[1],-2) eq(how[2],-2) eq(how[3],-2) eq(how[4],-2) eq(how[5],-2) eq(how[6],-2) eq(how[7],-2) eq(how[8],-2) eq(how[9],-2) </args>
        <args> aux_gb[5] eq(how[0],-3) eq(how[1],-3) eq(how[2],-3) eq(how[3],-3) eq(how[4],-3) eq(how[5],-3) eq(how[6],-3) eq(how[7],-3) eq(how[8],-3) eq(how[9],-3) </args>
        <args> aux_gb[7] eq(how[0],-4) eq(how[1],-4) eq(how[2],-4) eq(how[3],-4) eq(how[4],-4) eq(how[5],-4) eq(how[6],-4) eq(how[7],-4) eq(how[8],-4) eq(how[9],-4) </args>
        <args> aux_gb[9] eq(how[0],-5) eq(how[1],-5) eq(how[2],-5) eq(how[3],-5) eq(how[4],-5) eq(how[5],-5) eq(how[6],-5) eq(how[7],-5) eq(how[8],-5) eq(how[9],-5) </args>
        <args> aux_gb[11] eq(how[0],-6) eq(how[1],-6) eq(how[2],-6) eq(how[3],-6) eq(how[4],-6) eq(how[5],-6) eq(how[6],-6) eq(how[7],-6) eq(how[8],-6) eq(how[9],-6) </args>
        <args> aux_gb[13] eq(how[0],-7) eq(how[1],-7) eq(how[2],-7) eq(how[3],-7) eq(how[4],-7) eq(how[5],-7) eq(how[6],-7) eq(how[7],-7) eq(how[8],-7) eq(how[9],-7) </args>
        <args> aux_gb[15] eq(how[0],-8) eq(how[1],-8) eq(how[2],-8) eq(how[3],-8) eq(how[4],-8) eq(how[5],-8) eq(how[6],-8) eq(how[7],-8) eq(how[8],-8) eq(how[9],-8) </args>
        <args> aux_gb[17] eq(how[0],-9) eq(how[1],-9) eq(how[2],-9) eq(how[3],-9) eq(how[4],-9) eq(how[5],-9) eq(how[6],-9) eq(how[7],-9) eq(how[8],-9) eq(how[9],-9) </args>
      </group>
    </block>
    <group note="assigning not too many pizzas to free order">
      <sum>
        <list> %... </list>
        <condition> (le,%0) </condition>
      </sum>
      <args> aux_gb[18] eq(how[0],1) eq(how[1],1) eq(how[2],1) eq(how[3],1) eq(how[4],1) eq(how[5],1) eq(how[6],1) eq(how[7],1) eq(how[8],1) eq(how[9],1) </args>
      <args> aux_gb[19] eq(how[0],2) eq(how[1],2) eq(how[2],2) eq(how[3],2) eq(how[4],2) eq(how[5],2) eq(how[6],2) eq(how[7],2) eq(how[8],2) eq(how[9],2) </args>
      <args> aux_gb[20] eq(how[0],3) eq(how[1],3) eq(how[2],3) eq(how[3],3) eq(how[4],3) eq(how[5],3) eq(how[6],3) eq(how[7],3) eq(how[8],3) eq(how[9],3) </args>
      <args> aux_gb[21] eq(how[0],4) eq(how[1],4) eq(how[2],4) eq(how[3],4) eq(how[4],4) eq(how[5],4) eq(how[6],4) eq(how[7],4) eq(how[8],4) eq(how[9],4) </args>
      <args> aux_gb[22] eq(how[0],5) eq(how[1],5) eq(how[2],5) eq(how[3],5) eq(how[4],5) eq(how[5],5) eq(how[6],5) eq(how[7],5) eq(how[8],5) eq(how[9],5) </args>
      <args> aux_gb[23] eq(how[0],6) eq(how[1],6) eq(how[2],6) eq(how[3],6) eq(how[4],6) eq(how[5],6) eq(how[6],6) eq(how[7],6) eq(how[8],6) eq(how[9],6) </args>
      <args> aux_gb[24] eq(how[0],7) eq(how[1],7) eq(how[2],7) eq(how[3],7) eq(how[4],7) eq(how[5],7) eq(how[6],7) eq(how[7],7) eq(how[8],7) eq(how[9],7) </args>
      <args> aux_gb[25] eq(how[0],8) eq(how[1],8) eq(how[2],8) eq(how[3],8) eq(how[4],8) eq(how[5],8) eq(how[6],8) eq(how[7],8) eq(how[8],8) eq(how[9],8) </args>
      <args> aux_gb[26] eq(how[0],9) eq(how[1],9) eq(how[2],9) eq(how[3],9) eq(how[4],9) eq(how[5],9) eq(how[6],9) eq(how[7],9) eq(how[8],9) eq(how[9],9) </args>
    </group>
    <group note="pizzas assigned to free are cheaper than pizzas assigned to buy">
      <intension> imp(lt(%0,%1),ne(%0,neg(%1))) </intension>
      <args> how[0] how[1] </args>
      <args> how[0] how[2] </args>
      <args> how[0] how[3] </args>
      <args> how[0] how[4] </args>
      <args> how[0] how[5] </args>
      <args> how[1] how[2] </args>
      <args> how[1] how[3] </args>
      <args> how[1] how[4] </args>
      <args> how[1] how[5] </args>
      <args> how[2] how[5] </args>
      <args> how[3] how[2] </args>
      <args> how[3] how[4] </args>
      <args> how[3] how[5] </args>
      <args> how[4] how[2] </args>
      <args> how[4] how[5] </args>
      <args> how[6] how[0] </args>
      <args> how[6] how[1] </args>
      <args> how[6] how[2] </args>
      <args> how[6] how[3] </args>
      <args> how[6] how[4] </args>
      <args> how[6] how[5] </args>
      <args> how[6] how[7] </args>
      <args> how[6] how[8] </args>
      <args> how[7] how[0] </args>
      <args> how[7] how[1] </args>
      <args> how[7] how[2] </args>
      <args> how[7] how[3] </args>
      <args> how[7] how[4] </args>
      <args> how[7] how[5] </args>
      <args> how[7] how[8] </args>
      <args> how[8] how[0] </args>
      <args> how[8] how[1] </args>
      <args> how[8] how[2] </args>
      <args> how[8] how[3] </args>
      <args> how[8] how[4] </args>
      <args> how[8] how[5] </args>
      <args> how[9] how[0] </args>
      <args> how[9] how[1] </args>
      <args> how[9] how[2] </args>
      <args> how[9] how[3] </args>
      <args> how[9] how[4] </args>
      <args> how[9] how[5] </args>
      <args> how[9] how[6] </args>
      <args> how[9] how[7] </args>
      <args> how[9] how[8] </args>
    </group>
    <group>
      <sum>
        <list> %... </list>
        <condition> (eq,%0) </condition>
      </sum>
      <args> aux_gb[0] eq(how[0],-1) eq(how[1],-1) eq(how[2],-1) eq(how[3],-1) eq(how[4],-1) eq(how[5],-1) eq(how[6],-1) eq(how[7],-1) eq(how[8],-1) eq(how[9],-1) </args>
      <args> aux_gb[2] eq(how[0],-2) eq(how[1],-2) eq(how[2],-2) eq(how[3],-2) eq(how[4],-2) eq(how[5],-2) eq(how[6],-2) eq(how[7],-2) eq(how[8],-2) eq(how[9],-2) </args>
      <args> aux_gb[4] eq(how[0],-3) eq(how[1],-3) eq(how[2],-3) eq(how[3],-3) eq(how[4],-3) eq(how[5],-3) eq(how[6],-3) eq(how[7],-3) eq(how[8],-3) eq(how[9],-3) </args>
      <args> aux_gb[6] eq(how[0],-4) eq(how[1],-4) eq(how[2],-4) eq(how[3],-4) eq(how[4],-4) eq(how[5],-4) eq(how[6],-4) eq(how[7],-4) eq(how[8],-4) eq(how[9],-4) </args>
      <args> aux_gb[8] eq(how[0],-5) eq(how[1],-5) eq(how[2],-5) eq(how[3],-5) eq(how[4],-5) eq(how[5],-5) eq(how[6],-5) eq(how[7],-5) eq(how[8],-5) eq(how[9],-5) </args>
      <args> aux_gb[10] eq(how[0],-6) eq(how[1],-6) eq(how[2],-6) eq(how[3],-6) eq(how[4],-6) eq(how[5],-6) eq(how[6],-6) eq(how[7],-6) eq(how[8],-6) eq(how[9],-6) </args>
      <args> aux_gb[12] eq(how[0],-7) eq(how[1],-7) eq(how[2],-7) eq(how[3],-7) eq(how[4],-7) eq(how[5],-7) eq(how[6],-7) eq(how[7],-7) eq(how[8],-7) eq(how[9],-7) </args>
      <args> aux_gb[14] eq(how[0],-8) eq(how[1],-8) eq(how[2],-8) eq(how[3],-8) eq(how[4],-8) eq(how[5],-8) eq(how[6],-8) eq(how[7],-8) eq(how[8],-8) eq(how[9],-8) </args>
      <args> aux_gb[16] eq(how[0],-9) eq(how[1],-9) eq(how[2],-9) eq(how[3],-9) eq(how[4],-9) eq(how[5],-9) eq(how[6],-9) eq(how[7],-9) eq(how[8],-9) eq(how[9],-9) </args>
    </group>
    <group>
      <intension> eq(mul(%0,%1),%2) </intension>
      <args> used[0] 1 aux_gb[1] </args>
      <args> used[1] 2 aux_gb[3] </args>
      <args> used[2] 1 aux_gb[5] </args>
      <args> used[3] 0 aux_gb[7] </args>
      <args> used[4] 2 aux_gb[9] </args>
      <args> used[5] 2 aux_gb[11] </args>
      <args> used[6] 3 aux_gb[13] </args>
      <args> used[7] 1 aux_gb[15] </args>
      <args> used[8] 3 aux_gb[17] </args>
      <args> used[0] 2 aux_gb[18] </args>
      <args> used[1] 3 aux_gb[19] </args>
      <args> used[2] 1 aux_gb[20] </args>
      <args> used[3] 1 aux_gb[21] </args>
      <args> used[4] 1 aux_gb[22] </args>
      <args> used[5] 2 aux_gb[23] </args>
      <args> used[6] 3 aux_gb[24] </args>
      <args> used[7] 0 aux_gb[25] </args>
      <args> used[8] 2 aux_gb[26] </args>
    </group>
  </constraints>
  <objectives>
    <minimize note="minimizing summed up costs of pizzas" type="sum">
      <list> le(how[0],0) le(how[1],0) le(how[2],0) le(how[3],0) le(how[4],0) le(how[5],0) le(how[6],0) le(how[7],0) le(how[8],0) le(how[9],0) </list>
      <coeffs> 50 60 90 70 80 100 20 30 40 10 </coeffs>
    </minimize>
  </objectives>
</instance>
